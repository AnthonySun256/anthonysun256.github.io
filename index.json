[{"categories":null,"content":"emm…看起来这里还有写完 ","date":"2022-01-23","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["开发技巧"],"content":"前言 ","date":"2022-01-23","objectID":"/docker-with-vsc_best-practice/:1:0","tags":["Docker","VSCode"],"title":"Docker配合VSC开发最佳实践","uri":"/docker-with-vsc_best-practice/"},{"categories":["开发技巧"],"content":"为什么我们需要虚拟环境？ 很长时间以来最让我头疼的事情就是配置开发环境，最简单的一个例子是配置深度学习使用的 Python 环境。如果在本机上直接配置 Python 环境很容易出现各种问题，例如 Pytorch 和 Tensorflow 可能会同时依赖某个库的不同版本，这就会导致可能只有特定版本 Pytorch 和 Tensorflow 才有机会共存，而你在安装的时候很可能都没有意识到这个问题。 直到你运行某段代码时 Python 解释器给你报了几百行的错误你才意识哪里出了点问题，但是你又不知道是什么，于是你就会花上几天的时间改代码、查资料，最后你明白是你的环境配置有问题，于是又手动清理之前安装错误的 Python 库，并尝试重新运行之前的代码。 警告 当然，更多的时候这会开启新一个痛苦的轮回 Python 环境配置建议 所幸，现在我们可以使用 Anaconda 进行 Python 环境管理，不同的环境相互隔离以免出现冲突。conda 对于依赖的检查也比 pip 更好用，基本上不会出现依赖冲突问题 这一套的流程下来我相信无论是谁也受不了，但是环境问题远不止如此 环境问题示例 某段代码只能在某几个特定的电脑上才能运行 某段代码你睡了一觉后就无法运行了 你辛苦配了好久的环境不好使了/需要换电脑了/需要给别人也整一份 你有两项工作要做，但是这两项工作需要安装的包是冲突的，而且重新安装极其麻烦 你安装了某个包，然后你的操作系统就出了问题，即使卸载这个包也没有用 你想在 Linux 上使用 N卡 于是你按照网上的教程配置了显卡，然后你的显卡就不好使了 某个古董程序只能在老版 Linux 上运行 …… 应对以上问题，我们当然可以简单的给电脑做多系统/每次重装系统/买新的电脑来解决，但更为经济的做法是使用容器技术。 ","date":"2022-01-23","objectID":"/docker-with-vsc_best-practice/:1:1","tags":["Docker","VSCode"],"title":"Docker配合VSC开发最佳实践","uri":"/docker-with-vsc_best-practice/"},{"categories":["开发技巧"],"content":"Docker VS 虚拟机 快 Docker 的启停都是以秒或者毫秒为单位的，诸如 VM 等软件的启停最少也需要几分钟的时间 只要使用一行指令 / 一个 Dockerfile/docker-compose 文件 即可快速启动/部署我们的环境 轻量 Docker 环境不需要虚拟完整的操作系统或者硬件镜像体积天生就小，且基于联合文件系统可以让不同镜像间使用到的相同文件进行共用，进一步压缩了镜像体积。（一些常用的开发环境甚至只有不到 100M） 虚拟机需要大量的资源去虚拟完整的操作系统甚至是硬件无法实现多开；Docker 只占用很少的运行时资源，一台机器可以开启少则几十多则几百上千个 Docker Container 快速回滚 容器技术天生带有回滚属性，因为每个历史容器或者镜像都会有保存，而替换一个容器或者某个历史镜像是非常快速和简单的，你可以快速回到某一次的更改 隔离性强 一台机器上可以启动多个 Docker 容器，而且容器之间环境隔离不会互相干扰 易分享 你只需要将你的 Container 镜像推送到云端或者直接分享给你的 Dockerfile/docker-compose 文件给其他人即可让其他人在几分钟内快速部署和你相同的环境 你能够保证其他人都能使用和你一模一样的镜像 低成本 一台机器上可以启动几十上百个 Docker 容器 使用 Docker Swarm / K8s 等编排工具可以快速编排管理成百上千的容器 ","date":"2022-01-23","objectID":"/docker-with-vsc_best-practice/:1:2","tags":["Docker","VSCode"],"title":"Docker配合VSC开发最佳实践","uri":"/docker-with-vsc_best-practice/"},{"categories":["开发技巧"],"content":"VSCode 与 Docker 结合 VSCode 是什么相信我不必多言，依托于其 Remote Container 插件，我们可以快速地（真的很快🚀）连接到 Docker 容器中去，实现在本地编写程序，一键容器中调试运行——而这一切跟你直接在宿主机上开发几乎一模一样。而用虚拟机的话光是不同屏幕之间切换以及文件同步之类的操作就够惹人烦了。 再者，配合 VSCode 原生的 launch 和 task 配置并绑定相应段快捷键，我们可以节省很多应用编译时需要进行的操作（比如输入编译指令、清理目录等） ","date":"2022-01-23","objectID":"/docker-with-vsc_best-practice/:1:3","tags":["Docker","VSCode"],"title":"Docker配合VSC开发最佳实践","uri":"/docker-with-vsc_best-practice/"},{"categories":null,"content":" 基本信息 - nickname:Anthonyavatar:https://anthonysun256.github.io/images/avatar.jpgurl:https://anthonysun256.github.iodiscription:Anthony's blog ","date":"0001-01-01","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"友情提醒 互换友链请按以上格式在评论留言。（仅限个人非商业博客/网站） 提醒：网站失效、停止维护、内容不当都可能被取消连接！ 那些不尊重他人劳动成果，转载不加出处的，或恶意行为的网站，还请您不要来进行交换了。 ","date":"0001-01-01","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"}]